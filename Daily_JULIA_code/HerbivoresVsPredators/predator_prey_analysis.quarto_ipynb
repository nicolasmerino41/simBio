{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Predator-Prey Analysis\"\n",
        "author: \"NicolÃ s Merino\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "This document analyzes predator-prey relationships using various visualizations. I process data on predators and prey, calculate metrics, and visualize key relationships.\n",
        "\n",
        "---\n",
        "\n",
        "## Loading data\n"
      ],
      "id": "3bb9d28a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "PC = \"nicol\"\n",
        "num_species = 256\n",
        "@time include(\"../HerpsVsBirmmals.jl\")\n",
        "@time include(\"Daily_JULIA_code/kernels.jl\")\n",
        "@time include(\"Daily_JULIA_code/One-click code.jl\")\n",
        "@time include(\"Daily_JULIA_code/human_footprint.jl\")\n",
        "@time include(\"Daily_JULIA_code/Implicit competition for herbivores.jl\")\n",
        "predator_names = setdiff(spain_names, herbivore_names)"
      ],
      "id": "05895814",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "--- \n",
        "\n",
        "## Predator-to-Prey Dictionary\n",
        "\n",
        "We construct a dictionary where each predator is associated with the prey species it eats."
      ],
      "id": "5b3a95b3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "using DataStructures\n",
        "\n",
        "# Create the predator-to-prey dictionary\n",
        "predator_prey_dict = OrderedDict{String, Vector{String}}()\n",
        "\n",
        "# Iterate over all species in `spain_names`\n",
        "for i in 1:length(spain_names)\n",
        "    if herb_carv_vector[i] == 1e-8\n",
        "        prey_indices = findall(x -> x == 1, iberian_interact_NA[i, :])\n",
        "        prey_names = spain_names[prey_indices]\n",
        "        predator_prey_dict[spain_names[i]] = prey_names\n",
        "    end\n",
        "end\n",
        "\n",
        "# Print the resulting dictionary\n",
        "# println(predator_prey_dict)"
      ],
      "id": "87399588",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create the predator-to-prey dictionary with counts\n",
        "predator_prey_count = OrderedDict{String, Tuple{Int, Int, Int}}()\n",
        "\n",
        "for i in 1:length(spain_names)\n",
        "    if herb_carv_vector[i] == 1e-8\n",
        "        total_prey = 0\n",
        "        herbivore_prey = 0\n",
        "        predator_prey = 0\n",
        "\n",
        "        for j in 1:length(spain_names)\n",
        "            if iberian_interact_NA[i, j] == 1\n",
        "                total_prey += 1\n",
        "                if herb_carv_vector[j] == 1.0\n",
        "                    herbivore_prey += 1\n",
        "                elseif herb_carv_vector[j] == 1e-8\n",
        "                    predator_prey += 1\n",
        "                end\n",
        "            end\n",
        "        end\n",
        "\n",
        "        predator_prey_count[spain_names[i]] = (total_prey, herbivore_prey, predator_prey)\n",
        "    end\n",
        "end\n",
        "\n",
        "# Print the resulting dictionary\n",
        "# println(predator_prey_count)"
      ],
      "id": "dc1255f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Extract data for plotting\n",
        "predators = collect(keys(predator_prey_count))\n",
        "total_prey = [predator_prey_count[p][1] for p in predators]\n",
        "herbivores_eaten = [predator_prey_count[p][2] for p in predators]\n",
        "predators_eaten = [predator_prey_count[p][3] for p in predators]\n",
        "\n",
        "begin\n",
        "    # Sort the predators by total prey eaten\n",
        "    sorted_indices = sortperm(total_prey, rev=true)\n",
        "    sorted_predators = predators[sorted_indices]\n",
        "    sorted_herbivores_eaten = herbivores_eaten[sorted_indices]\n",
        "    sorted_predators_eaten = predators_eaten[sorted_indices]\n",
        "\n",
        "    fig1 = Figure(resolution=(800, 400))\n",
        "    ax1 = Axis(fig1[1, 1], title=\"Prey Composition by Predator\", xlabel=\"Predators\", ylabel=\"Number of Prey\")\n",
        "\n",
        "    # Stacked bars\n",
        "    bar_positions = 1:length(sorted_predators)\n",
        "    barplot!(ax1, bar_positions, sorted_herbivores_eaten, label=\"Herbivores Eaten\", color=:blue)\n",
        "    barplot!(ax1, bar_positions, sorted_predators_eaten, offset=sorted_herbivores_eaten, label=\"Predators Eaten\", color=:orange)\n",
        "\n",
        "    # ax1.xticks = (bar_positions, sorted_predators)\n",
        "    Legend(fig1[1, 2], ax1)\n",
        "    fig1\n",
        "end"
      ],
      "id": "e1de81c6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Proportion of herbivores in the diet\n",
        "proportion_herbivores = [herbivores_eaten[i] / total_prey[i] for i in 1:length(predators)]\n",
        "\n",
        "begin\n",
        "    \n",
        "    fig2 = Figure(resolution=(800, 400))\n",
        "    ax2 = Axis(fig2[1, 1], title=\"Predator Diversity and Dominance\",\n",
        "               xlabel=\"Total Prey Eaten\", ylabel=\"Proportion of Herbivores in Diet\")\n",
        "\n",
        "    # Scatterplot\n",
        "    scatter!(ax2, total_prey, proportion_herbivores, \n",
        "             markersize=0.2 .* predators_eaten, color=:green, label=\"Predators\")\n",
        "\n",
        "    fig2\n",
        "end"
      ],
      "id": "a5cf1a0c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cut = true\n",
        "begin \n",
        "    fig3 = Figure(resolution=(800, 400))\n",
        "    ax3 = Axis(fig3[1, 1], title=\"Prey Availability per Predator\", xlabel=\"Prey Species\", ylabel=\"Predators\")\n",
        "    names_herb_pred = vcat(herbivore_names, predator_names)\n",
        "    ibe = iberian_interact_NA[names_herb_pred, names_herb_pred]\n",
        "    if cut == true\n",
        "        ibe = ibe[156:256, :]\n",
        "    end\n",
        "    # Create heatmap with filtered matrix\n",
        "    heatmap!(ax3, ibe', colormap=:viridis, interpolate=false)\n",
        "        \n",
        "    fig3\n",
        "end"
      ],
      "id": "5ddbd979",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Compute overlap matrix\n",
        "overlap_matrix = [\n",
        "    length(intersect(predator_prey_dict[p1], predator_prey_dict[p2])) for p1 in predators, p2 in predators\n",
        "]\n",
        "\n",
        "# Plot predator overlap heatmap\n",
        "begin\n",
        "    fig4 = Figure(resolution=(800, 400))\n",
        "    ax4 = Axis(fig4[1, 1], title=\"Predator Overlap (Shared Prey Species)\", xlabel=\"Predators\", ylabel=\"Predators\")\n",
        "    heatmap!(ax4, overlap_matrix, colormap=:blues, colorrange=(0, maximum(overlap_matrix)))\n",
        "\n",
        "    fig4\n",
        "end"
      ],
      "id": "15848e7e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Compute relative overlap matrix\n",
        "relative_overlap_matrix = [\n",
        "    length(intersect(predator_prey_dict[p1], predator_prey_dict[p2])) /\n",
        "    max(length(predator_prey_dict[p1]), length(predator_prey_dict[p2])) for p1 in predators, p2 in predators\n",
        "]\n",
        "\n",
        "# Plot relative predator overlap heatmap\n",
        "begin\n",
        "    fig4 = Figure(resolution=(800, 400))\n",
        "    ax4 = Axis(fig4[1, 1], title=\"Relative Predator Overlap (Shared Prey Species)\", \n",
        "               xlabel=\"Predators\", ylabel=\"Predators\")\n",
        "    \n",
        "    # Plot the relative overlap heatmap\n",
        "    heatmap!(ax4, relative_overlap_matrix, colormap=:blues, colorrange=(0, 1))\n",
        "\n",
        "    dispfig4\n",
        "end"
      ],
      "id": "13c65aa9",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-1.11",
      "language": "julia",
      "display_name": "Julia 1.11.1",
      "path": "C:\\Users\\nicol\\AppData\\Roaming\\jupyter\\kernels\\julia-1.11"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}